<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- enable use-expressions -->
	<http auto-config="true" use-expressions="true" create-session="always" > 

		<!--
		<session-management>
			<concurrency-control max-sessions="1" error-if-maximum-exceeded="true" />
		</session-management>
		-->
		
		<!-- 
		Spring security adds the prefix "ROLE_" by default. If you want this removed or changed, take a look at http://forum.spring.io/forum/spring-projects/security/51066-how-to-change-role-from-interceptor-url

			EDIT: found this as well: Spring Security remove RoleVoter prefix
		 -->
		<!-- <intercept-url pattern="/viewAllEmp**" access="hasRole('ADMIN')" />
		 <intercept-url pattern="/welcome**" access="hasRole('USER')" /> -->
		 
		 <!--  
		In Spring 4, there are two methods hasAuthority() and hasAnyAuthority() defined in org.springframework.security.access.expression.SecurityExpressionRoot class. 
		These two methods checks only your custom role name without adding ROLE_ prefix. Definition as follows: -->
		
 		<intercept-url pattern="/viewAllEmp**" access="hasAuthority('ADMIN')" />
		 <intercept-url pattern="/welcome**" access="hasAnyAuthority('ADMIN','USER')" /> 
 
		<!-- access denied page -->
		<access-denied-handler error-page="/403" />

		<form-login login-page="/login" default-target-url="/welcome"
			login-processing-url="/j_spring_security_check"
			authentication-failure-url="/login?error" username-parameter="username"
			password-parameter="password" />
		<logout logout-success-url="/login?logout" invalidate-session="true" logout-url="/perform-logout"
			delete-cookies="JSESSIONID" />
		<!-- enable csrf protection -->
		<csrf />
	</http>

	<beans:bean name="bcryptEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

	<!-- Select users and user_roles from database -->
	<authentication-manager>
		<authentication-provider>
			<!-- <password-encoder ref="bcryptEncoder" /> -->
			<jdbc-user-service data-source-ref="dataSource"
				users-by-username-query="select username,password, enabled from employee where username=?"
				authorities-by-username-query="select username, rolename as role from emproles where username =?" />
		</authentication-provider>
	</authentication-manager>

</beans:beans>